// Continuum UI Showcase - A Modern Task Management Application
// This example demonstrates the power of FluentAI's declarative UI system

use std::time::Duration;

// Define our application state using reactive state fields
public state_field current_view: string = "dashboard"
public state_field tasks: list = []
public state_field selected_task: option = nil
public state_field filter_status: string = "all"
public state_field theme: string = "light"
public state_field notification_count: int = 0

// Task model using FluentAI's object-oriented patterns
public function Task(id: string, title: string, description: string, status: string, priority: string) {
    let state = {
        "id": id,
        "title": title,
        "description": description,
        "status": status, // "pending", "in_progress", "completed"
        "priority": priority, // "low", "medium", "high"
        "created_at": perform Time.now(),
        "updated_at": perform Time.now()
    };
    
    let self = {
        "get_id": () => state.id,
        "get_title": () => state.title,
        "get_description": () => state.description,
        "get_status": () => state.status,
        "get_priority": () => state.priority,
        
        "update_status": (new_status) => {
            state.status = new_status;
            state.updated_at = perform Time.now();
            self
        },
        
        "update": (updates) => {
            updates.for_each((key, value) => {
                if state.has_key(key) {
                    state[key] = value;
                }
            });
            state.updated_at = perform Time.now();
            self
        },
        
        "to_ui_data": () => state
    };
    
    return self;
}

// Main application surface
public surface task_app {
    size: (1200, 800),
    background: theme == "light" ? "#f5f5f5" : "#1a1a1a",
    title: "FluentAI Task Manager",
    
    // Navigation bar
    element navbar {
        position: (0, 0),
        size: (1200, 60),
        background: theme == "light" ? "#ffffff" : "#2d2d2d",
        shadow: "0 2px 4px rgba(0,0,0,0.1)",
        
        element logo {
            content: "✨ FluentAI Tasks",
            position: (20, 15),
            font_size: 24,
            font_weight: "bold",
            color: theme == "light" ? "#333" : "#fff"
        }
        
        element nav_menu {
            position: (300, 0),
            layout: "horizontal",
            spacing: 20,
            
            element dashboard_btn {
                content: "Dashboard",
                padding: (10, 20),
                on_click: disturb current_view("dashboard"),
                
                when current_view == "dashboard" {
                    background: "#007bff",
                    color: "#ffffff",
                    radius: 4
                }
                when current_view != "dashboard" {
                    background: "transparent",
                    color: theme == "light" ? "#666" : "#ccc"
                }
            }
            
            element tasks_btn {
                content: "Tasks",
                padding: (10, 20),
                on_click: disturb current_view("tasks"),
                
                when current_view == "tasks" {
                    background: "#007bff",
                    color: "#ffffff",
                    radius: 4
                }
                when current_view != "tasks" {
                    background: "transparent",
                    color: theme == "light" ? "#666" : "#ccc"
                }
            }
            
            element analytics_btn {
                content: "Analytics",
                padding: (10, 20),
                on_click: disturb current_view("analytics"),
                
                when current_view == "analytics" {
                    background: "#007bff",
                    color: "#ffffff",
                    radius: 4
                }
                when current_view != "analytics" {
                    background: "transparent",
                    color: theme == "light" ? "#666" : "#ccc"
                }
            }
        }
        
        element notification_badge {
            position: (1050, 15),
            
            when notification_count > 0 {
                visible: true,
                content: f"🔔 {notification_count}",
                background: "#ff4444",
                color: "#ffffff",
                padding: (5, 10),
                radius: 15
            }
            when notification_count == 0 {
                visible: false
            }
        }
        
        element theme_toggle {
            position: (1120, 15),
            content: theme == "light" ? "🌙" : "☀️",
            font_size: 24,
            cursor: "pointer",
            on_click: disturb theme(theme == "light" ? "dark" : "light")
        }
    }
    
    // Main content area
    element content_area {
        position: (0, 60),
        size: (1200, 740),
        
        // Dashboard view
        when current_view == "dashboard" {
            element dashboard {
                padding: 20,
                
                element welcome_message {
                    content: "Welcome to FluentAI Task Manager",
                    font_size: 32,
                    font_weight: "bold",
                    color: theme == "light" ? "#333" : "#fff",
                    margin_bottom: 20
                }
                
                element stats_grid {
                    layout: "grid",
                    columns: 3,
                    gap: 20,
                    
                    element total_tasks_card {
                        background: theme == "light" ? "#fff" : "#2d2d2d",
                        padding: 20,
                        radius: 8,
                        shadow: "0 2px 8px rgba(0,0,0,0.1)",
                        
                        element stat_value {
                            content: tasks.length().to_string(),
                            font_size: 48,
                            font_weight: "bold",
                            color: "#007bff"
                        }
                        
                        element stat_label {
                            content: "Total Tasks",
                            color: theme == "light" ? "#666" : "#aaa"
                        }
                    }
                    
                    element completed_tasks_card {
                        background: theme == "light" ? "#fff" : "#2d2d2d",
                        padding: 20,
                        radius: 8,
                        shadow: "0 2px 8px rgba(0,0,0,0.1)",
                        
                        element stat_value {
                            content: tasks.filter(t => t.get_status() == "completed").length().to_string(),
                            font_size: 48,
                            font_weight: "bold",
                            color: "#28a745"
                        }
                        
                        element stat_label {
                            content: "Completed",
                            color: theme == "light" ? "#666" : "#aaa"
                        }
                    }
                    
                    element pending_tasks_card {
                        background: theme == "light" ? "#fff" : "#2d2d2d",
                        padding: 20,
                        radius: 8,
                        shadow: "0 2px 8px rgba(0,0,0,0.1)",
                        
                        element stat_value {
                            content: tasks.filter(t => t.get_status() == "pending").length().to_string(),
                            font_size: 48,
                            font_weight: "bold",
                            color: "#ffc107"
                        }
                        
                        element stat_label {
                            content: "Pending",
                            color: theme == "light" ? "#666" : "#aaa"
                        }
                    }
                }
                
                element recent_activity {
                    margin_top: 40,
                    
                    element section_title {
                        content: "Recent Activity",
                        font_size: 24,
                        font_weight: "bold",
                        color: theme == "light" ? "#333" : "#fff",
                        margin_bottom: 20
                    }
                    
                    element activity_list {
                        background: theme == "light" ? "#fff" : "#2d2d2d",
                        padding: 20,
                        radius: 8,
                        
                        // This would show recent task updates
                        element activity_item {
                            content: "Task activity will appear here...",
                            color: theme == "light" ? "#666" : "#aaa"
                        }
                    }
                }
            }
        }
        
        // Tasks view
        when current_view == "tasks" {
            element tasks_view {
                padding: 20,
                
                element tasks_header {
                    display: "flex",
                    justify_content: "space-between",
                    margin_bottom: 20,
                    
                    element tasks_title {
                        content: "Tasks",
                        font_size: 32,
                        font_weight: "bold",
                        color: theme == "light" ? "#333" : "#fff"
                    }
                    
                    element add_task_btn {
                        content: "+ New Task",
                        background: "#007bff",
                        color: "#ffffff",
                        padding: (10, 20),
                        radius: 4,
                        cursor: "pointer",
                        on_click: disturb show_task_modal(true)
                    }
                }
                
                element filter_bar {
                    margin_bottom: 20,
                    display: "flex",
                    gap: 10,
                    
                    element filter_all {
                        content: "All",
                        padding: (8, 16),
                        radius: 20,
                        cursor: "pointer",
                        on_click: disturb filter_status("all"),
                        
                        when filter_status == "all" {
                            background: "#007bff",
                            color: "#ffffff"
                        }
                        when filter_status != "all" {
                            background: theme == "light" ? "#e9ecef" : "#444",
                            color: theme == "light" ? "#495057" : "#ccc"
                        }
                    }
                    
                    element filter_pending {
                        content: "Pending",
                        padding: (8, 16),
                        radius: 20,
                        cursor: "pointer",
                        on_click: disturb filter_status("pending"),
                        
                        when filter_status == "pending" {
                            background: "#ffc107",
                            color: "#ffffff"
                        }
                        when filter_status != "pending" {
                            background: theme == "light" ? "#e9ecef" : "#444",
                            color: theme == "light" ? "#495057" : "#ccc"
                        }
                    }
                    
                    element filter_completed {
                        content: "Completed",
                        padding: (8, 16),
                        radius: 20,
                        cursor: "pointer",
                        on_click: disturb filter_status("completed"),
                        
                        when filter_status == "completed" {
                            background: "#28a745",
                            color: "#ffffff"
                        }
                        when filter_status != "completed" {
                            background: theme == "light" ? "#e9ecef" : "#444",
                            color: theme == "light" ? "#495057" : "#ccc"
                        }
                    }
                }
                
                element tasks_list {
                    layout: "vertical",
                    gap: 10,
                    
                    // Tasks would be rendered here dynamically
                    element task_item {
                        background: theme == "light" ? "#fff" : "#2d2d2d",
                        padding: 20,
                        radius: 8,
                        shadow: "0 2px 4px rgba(0,0,0,0.1)",
                        cursor: "pointer",
                        
                        element task_title {
                            content: "Sample Task",
                            font_size: 18,
                            font_weight: "bold",
                            color: theme == "light" ? "#333" : "#fff"
                        }
                        
                        element task_description {
                            content: "This is a sample task description",
                            color: theme == "light" ? "#666" : "#aaa",
                            margin_top: 5
                        }
                        
                        element task_meta {
                            display: "flex",
                            gap: 20,
                            margin_top: 10,
                            
                            element priority_badge {
                                content: "High Priority",
                                background: "#ff4444",
                                color: "#ffffff",
                                padding: (4, 8),
                                radius: 4,
                                font_size: 12
                            }
                            
                            element status_badge {
                                content: "In Progress",
                                background: "#17a2b8",
                                color: "#ffffff",
                                padding: (4, 8),
                                radius: 4,
                                font_size: 12
                            }
                        }
                    }
                }
            }
        }
        
        // Analytics view with 3D visualization
        when current_view == "analytics" {
            space analytics_3d {
                size: (1200, 740),
                camera_position: (0, 5, 10),
                camera_target: (0, 0, 0),
                
                element 3d_title {
                    content: "Task Analytics in 3D",
                    position: (0, 8, 0),
                    font_size: 2,
                    color: "#007bff",
                    billboard: true
                }
                
                // 3D bar chart for task status
                element pending_bar {
                    type: "box",
                    position: (-3, 2, 0),
                    size: (1, 4, 1),
                    color: "#ffc107",
                    rotation_y: perform Time.now() * 0.001
                }
                
                element progress_bar {
                    type: "box",
                    position: (0, 3, 0),
                    size: (1, 6, 1),
                    color: "#17a2b8",
                    rotation_y: perform Time.now() * 0.001
                }
                
                element completed_bar {
                    type: "box",
                    position: (3, 1.5, 0),
                    size: (1, 3, 1),
                    color: "#28a745",
                    rotation_y: perform Time.now() * 0.001
                }
                
                // Floating particles for visual effect
                element particles {
                    type: "particle_system",
                    position: (0, 0, 0),
                    particle_count: 100,
                    particle_size: 0.1,
                    particle_color: "#007bff",
                    particle_lifetime: 5.0,
                    emit_rate: 10
                }
            }
        }
    }
}

// Initialize the application with sample data
private function init_app() {
    // Create some sample tasks
    let sample_tasks = [
        Task("1", "Implement Continuum UI Parser", "Complete the parser for Continuum syntax", "completed", "high"),
        Task("2", "Design Reactive State System", "Create the reactive state management for UI", "in_progress", "high"),
        Task("3", "Build Example Applications", "Create showcase applications", "pending", "medium"),
        Task("4", "Write Documentation", "Document the Continuum UI system", "pending", "medium"),
        Task("5", "Performance Optimization", "Optimize rendering pipeline", "pending", "low")
    ];
    
    // Update the tasks state
    disturb tasks(sample_tasks);
    
    // Set up periodic notifications
    spawn {
        loop {
            perform Async.sleep(Duration::from_secs(30));
            disturb notification_count(notification_count + 1);
        }
    };
}

// Main entry point
private function main() {
    $("🚀 Starting FluentAI Continuum UI Showcase...").print();
    
    // Initialize the application
    init_app();
    
    // The surface is automatically rendered by the Continuum runtime
    // In a real implementation, this would start the rendering loop
    $(f"Application initialized with {tasks.length()} tasks").print();
}

// Run the application
main()