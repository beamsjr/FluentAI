// Stock Portfolio Rebalancer
// Main application entry point

use Types;
use Portfolio;
use UI;

// Initialize the application
private function initialize() -> map {
    $("").print();
    $("=== Stock Portfolio Rebalancer ===").print();
    $("Type 'help' for available commands").print();
    $("").print();
    
    Types.create_portfolio()
}

// Main application loop
private function run_app(portfolio: map) -> void {
    let current_portfolio = portfolio;
    let running = true;
    
    while (running) {
        // Show prompt
        $("rebalancer> ").print_no_newline();
        
        // Read user input
        let input = perform IO.read_line();
        
        // Process command
        let updated_portfolio = UI.process_command(current_portfolio, input);
        
        // Check if user wants to quit
        if (updated_portfolio.get("_quit", false)) {
            running = false;
        } else {
            current_portfolio = updated_portfolio;
        }
    }
}

// Example: Pre-populate portfolio for demo
private function create_demo_portfolio() -> map {
    let portfolio = Types.create_portfolio();
    
    // Add some stocks
    portfolio = Portfolio.add_stock(portfolio, "AAPL", 50.0);
    portfolio = Portfolio.add_stock(portfolio, "GOOGL", 10.0);
    portfolio = Portfolio.add_stock(portfolio, "MSFT", 25.0);
    
    // Set target allocations
    portfolio = Portfolio.set_allocation(portfolio, "AAPL", 40.0);
    portfolio = Portfolio.set_allocation(portfolio, "GOOGL", 30.0);
    portfolio = Portfolio.set_allocation(portfolio, "MSFT", 30.0);
    
    portfolio
}

// Entry point
public function main() -> void {
    // Check for demo mode
    let args = perform System.args();
    let use_demo = args.contains("--demo");
    
    // Initialize portfolio
    let portfolio = if (use_demo) {
        $("Loading demo portfolio...").print();
        create_demo_portfolio()
    } else {
        initialize()
    };
    
    // Run the application
    run_app(portfolio);
}